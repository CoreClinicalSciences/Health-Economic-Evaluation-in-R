# Exercise 2.5 {.unnumbered}

This section reproduces exercise 2.5 in R from Chapter 2 of the book "Decision Modelling for Health Economic Evaluation" by Andrew Briggs, Mark Sculpher, and Karl Claxton

First, we will calculate the monotherapy transition probabilities for the control based on the data provided in Table 2.5. These probabilities should match the transition probabilities provided in Table 2.2. part 1(a)

We need to calculate the following transition probabilities:

-   Transition probability from A to A
-   Transition probability from A to B
-   Transition probability from A to C
-   Transition probability from A to D
-   Transition probability from B to B
-   Transition probability from B to C
-   Transition probability from B to D
-   Transition probability from C to C
-   Transition probability from C to D

## Part 1: Populating transition probability matrix

Now that we have calculated the transition probabilities, we will use these values to populate the transition probability matrix and initialize the parameters necessary for modelling.

The matrix will follow the structure below, as shown in table 2.6:

```{r ex 2.5.1 matrix structure}
#         To State
#           A B C D
# From    A
# State   B
#         C
#         D
```

\
As you complete the matrix, remember, that it's not possible to go backwards in this model, so any transition probability below the diagonal values will be 0.

```{r ex 2.5.1 setup parameters}


tProbs <- matrix(
  c(0.721453287, 0.201845444, 0.066897347, 0.009803922,
    0          , 0.581081081, 0.406995231, 0.011923688,
    0          , 0          , 0.750142939, 0.249857061,
    0          , 0          , 0          , 1
  ),ncol = 4, nrow = 4, byrow = T
)

#please note that there are more decimals here than in Table 2.2a and other figures. This is because we aim to maintain the exact decimals used in the Excel sheet for consistency. To get decimals closer to what we achieve here, we recommend using Table 2.5 as a guide.

```

:::{.callout-important} 
## Check
We will use `rowSums` to make sure we've entered our transition matrix correctly. All the rows should equal 1.
:::

```{r 2.5.1 check row totals}
rowSums(tProbs) 
```

\
Now that we know our transition matrix is correct, we will fill in the other parameters that are provided in the exercise. 

:::{.callout-tip}
After each parameter, we've used `#` and a description of what that parameter is so we can easily revisit our code at a future date.
:::
```{r 2.5.1 cost & other inputs}
#costs
dmca <- 1701 #direct medical cost of A
dmcb <- 1774 #direct medical cost of B
dmcc <- 6948 #direct medical cost of C
ccca <- 1055 #community care cost of A
cccb <- 1278 #community care cost of B
cccc <- 2059 #community care cost of C
cAZT <- 2278 #cost of Zidovudine
cLam <- 2086.5 #cost of Lamivudine 

#other parameters
RR <- 0.509 #relative risk of treatment
cDR <- 0.06 #annual discount rate cost (proportion)
oDR <- 0 #annual discount rate benefits (proportion)
```

## Part 2: Calculating proportion of individuals in each state

Now, we will calculate the proportion of individuals in each state for years 1-20 (Monotherapy), their life-years, and associated costs.

We will input the initial vector for the state space, where each element refers to the initial proportion of individuals in state A-D respectively.

We assume all individuals start in State A. We are giving the vector the name `iVec`.

```{r 2.5.2 vector definition}

iVec <-  c(1,0,0,0)
```
\
We are going to create a function called `calculateYearlyProbs` that we can use to calculate the proportion of people in each state at a given time point. 

This function will return a t (years) x 4 (states) matrix where the rows represent the proportion in a given state at year t
```{r 2.5.2 calculate yearly proportions}
calculateYearlyProbs <- function(tProbs, t, iVec){
  
  #create empty matrix that we will fill in
  
  matReturn <- matrix(nrow = t, ncol = 4)
  
  #initialize first vector of proportions
  
  #create column names
  colnames(matReturn) <- c("A","B","C","D")

  #Loop through all time-points and multiply the vector by 
  for(i in 1:(t)){

    matReturn[i,] <-   iVec %*% tProbs
    
    #update ivec
    iVec <- iVec %*% tProbs
    
  }
  return(matReturn)
  
}
```
\
Now, we will call the function, by entering our transition probabilities matrix, the number of years we want to calculate, and our starting vector as arguments. We've called the results of our function `yearlyProbs`. It will return a matrix that is 20 rows (years) long and 4 states wide. 
```{r 2.5.2 calculating yearly proportions for 20 years}
yearlyProbs <- calculateYearlyProbs(tProbs,20,iVec)
```
:::{.callout-important}
## Check
Use `rowSums` to check that all rows sum to 1.
:::
```{r 2.5.2 check row totals}
rowSums(yearlyProbs)
```

Next we will calculate the number of life years for each year. This is equal to the the proportion that is not in State D (death). 
```{r 2.5.2 calculate life years for each cycle (year)}
lifeYears <- rowSums(yearlyProbs[,-4])
```

## Part 3: Calculating costs

Using the cost inputs from before, we will calculate the cost. Then, based on those costs, we will calculate the discounted cost using the discounted cost formula provided in the text.

To calculate the non-discounted costs, we will calculate a cost associated with each health state in our markov model, and then create a vector to hold the costs associated with each state.
```{r 2.5.3 Monotherapy Cost 1}
costA <- dmca+ccca+cAZT
costB <- dmcb+cccb+cAZT
costC <- dmcc+cccc+cAZT

costVector <- c(costA,costB,costC)
```

\
We will use matrix multiplication to calculate the non-discounted cost. We will multiply `yearlyProbs`, the matrix holding the proportion in each health state by cycle (i.e. year), by our new `costVector`. 

Remember, we need to make sure the vector and the matrix have the same number of columns. So, we will use `[-4]` to remove the death state column from the matrix. 
```{r 2.5.3 Monotherapy Cost 2}
nonDiscCost <- yearlyProbs[,-4] %*% costVector
```

\
Our non-discounted costs are saved in `nonDiscCost`. To get teh discounted cost, we will apply the discounting formula. We will create a discounting function that we can reuse in the future.

So we can apply this function to multiple values of t at once we will use R's vectorization. All basic operations in R "-+^/*" support basic R vectorization. 

This means we can use the discount formula for all values of t at once (t = 1,..,20). We can do this by using 1:t in place of "t" in the formula

```{r 2.5.3 Discounting Function}
discountFormula <- function(nonDiscount,discRate,t){
  
  return(nonDiscount/(1+discRate)^(1:t))
  
}
```
\
We can calculate the discounted costs by filling in the arguments for the newly created discount function.

We need to specify: the non-discounted costs; the discount rate; and the number of years you are calculating for.

```{r 2.5.3 Calculate discounted costs}
discCost <- discountFormula(nonDiscCost, discRate = cDR,20)
```

\
We will use the `sum` function to calculate the total costs and life years over the 20 years of the Markov model. 
```{r 2.5.3 Calculate total costs and life years}
totalDiscCostMonoTherapy <- sum(discCost)
totalLifeYearsMonoTherapy <- sum(lifeYears)
```

## Part 4: Conducting analysis for combination therapy

Having completed the analysis for the monotherapy, we will repeat the same steps for the combination therapy, with a few changes. Use table 2.2 part 1(b) as a guide to calculate the combination transition matrix. Recall that the combination therapy is only used for the first two years of treatment.

To begin, lets create a function that converts the original transition matrix to the combination transition matrix by using the risk ratio provided

```{r 2.5.4 Combination Therapy Proportions Function}

calculateProbCombination <- function(tProbs,RR = 0.506){
  
  newMat <- tProbs
  
  #change the upper diagonals and multiply by risk rate
  newMat[upper.tri(newMat)] <-   newMat[upper.tri(newMat)]*RR 
  
  diag(newMat) <- 0
  
  #change the diagonals to be 1- the rowsums
  diag(newMat) <- 1-rowSums(newMat)
  
  return(newMat)
  
}
```

Now, we will use our function to calculate the transition probabilities for the combination therapy:

```{r 2.5.4 Calculate proportions for combination therapy}
tProbsComb <- calculateProbCombination(tProbs,RR = RR)
```
:::{.callout-important}
## Check
Just like before, we will use `rowSums` to check that all rows sum to 1.
:::
```{r 2.5.4 Use rowSums to check row totals}
rowSums(tProbsComb)
```

Then we will calculate the yearly proportions for the first two years using the function `calculateYearlyProbs` that we created above. The function arguments will include `tProbsComb`--the new proportions matrix for the combination therapy.

```{r 2.5.4 calculate proportions years 1&2}
probsCombYearly1_2 <- calculateYearlyProbs(tProbsComb,t = 2,iVec = iVec)
```

We also need to calculate the yearly proportions for years 3-20. We will use the transition probabilities for monotherapy for these calculations, reflecting that the combination therapy is only used in years 1 and 2. 

We will then use `rbind` to combine the two calculations to get the values for years 1-20, and check that each row sums to 1.
```{r 2.5.4 calculate proportions year 3-20}
probsCombYearly3_20 <- calculateYearlyProbs(tProbs,t = 18,iVec =probsCombYearly1_2[2,])

#combine them
probsCombYearly <- rbind(probsCombYearly1_2,probsCombYearly3_20)

#check
rowSums(probsCombYearly) # all sum to 1
```
\
Using the same approach as for the monotherapy, we will calculate the life years and the costs, being careful to apply the correct costs to the correct proportions. 
```{r 2.5.4. calculate life years and costs}
#calculate the life-years
lifeYearsComb <- rowSums(probsCombYearly[,-4])

#calculate the costs
costAComb <- costA+cLam
costBComb <- costB+cLam
costCComb <- costC+cLam
#combine the costs into a vector
costVectorComb <- c(costAComb,costBComb,costCComb)

#use matrix multiplication
costCombNonDisc1_2 <-   probsCombYearly[1:2,-4] %*% costVectorComb
costCombNonDisc3_20 <- probsCombYearly[3:20,-4] %*% costVector
```
\
We will again use `rbind` to combine the non-discounted costs and then use the discount function to calculate the discounted costs. 

With the costs and life years calculated for each year, we will use `sum` to calculate the total costs and life years associated with the combination therapy. 
```{r 2.5.4 discounted costs and total costs & life years}
#use rbind to combine the non-discounted cost
costCombNonDisc <- rbind(costCombNonDisc1_2,costCombNonDisc3_20)

#calculate the discounted rate
costCombDisc <- discountFormula(costCombNonDisc, discRate = cDR,20)

#calculate the total costs and life years for the combination therapy
totalLifeYearsComb <- sum(lifeYearsComb)
totalDiscCostComb <- sum(costCombDisc)
```

## Part 5: Calculating the ICER

Lastly, we compare the total life years and costs between the monotherapy and combination therapy to calculate the ICER.

```{r Calculating the ICER}
#combination over monotherapy
lifeYearsGained <- totalLifeYearsComb - totalLifeYearsMonoTherapy
increasedCost <- totalDiscCostComb - totalDiscCostMonoTherapy

#calculate ICER
ICER <- increasedCost/lifeYearsGained

ICER 
```
