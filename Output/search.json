[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Decision Modelling for Health Economic Evaluation in R",
    "section": "",
    "text": "Purpose of This e-Book\nThe Decision Modelling for Health Economic Evaluation, is an important book and likely an introductory book for those who want to learn about health economic modelling\nSay this e book is intended to supplement readers who want to learn how to apply the concepts illustrated in the book in R instead of Excel.\nThis ebook contains mostly supporting materials in R, instead of Excel that is available here (https://www.herc.ox.ac.uk/downloads/decision-modelling-for-health-economic-evaluation).",
    "crumbs": [
      "Purpose of This e-Book"
    ]
  },
  {
    "objectID": "Chapters/1-Introduction.html",
    "href": "Chapters/1-Introduction.html",
    "title": "1  Chapter 1",
    "section": "",
    "text": "blah",
    "crumbs": [
      "Introduction",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Chapter 1</span>"
    ]
  },
  {
    "objectID": "Chapters/Appendix-1-Codes.html",
    "href": "Chapters/Appendix-1-Codes.html",
    "title": "2  Appendix",
    "section": "",
    "text": "blah",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Appendix</span>"
    ]
  },
  {
    "objectID": "Chapters/Ch1-Introduction.html",
    "href": "Chapters/Ch1-Introduction.html",
    "title": "1  Chapter 1 - Introduction",
    "section": "",
    "text": "blah",
    "crumbs": [
      "Introduction",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Chapter 1 - Introduction</span>"
    ]
  },
  {
    "objectID": "Exercises/Ch2-Exercise-25.html",
    "href": "Exercises/Ch2-Exercise-25.html",
    "title": "\n1  Exercise 2.5\n",
    "section": "",
    "text": "1.1 Preamble on matrix operations\nWhen building markov molds and building transition matrices, using matrix-vector multiplications simplifies manual computation significantly.\nTo multiply a matrix by a vector we must have the same number of columns in the matrix as rows in a vector. Consider below an example of a two-state markov model and the goal is to discern the proportion left in the first state after two time cycles. We also show how to select rows and columns of a matrix.ov model and the goal is to discern the proportion left in the first state after two time cycles. We also show how to select rows and columns of a matrix.",
    "crumbs": [
      "Introduction",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Exercise 2.5</span>"
    ]
  },
  {
    "objectID": "Exercises/Ch2-Exercise-25.html#preamble-on-matrix-operations",
    "href": "Exercises/Ch2-Exercise-25.html#preamble-on-matrix-operations",
    "title": "\n1  Exercise 2.5\n",
    "section": "",
    "text": "1.1.1 Matrix multiplication example\nFirst, we will create our vector called iVec_example. The number of entries in this vector should be the same as the number of states. In this example we will assume that everyone starts in the first state.\nNote: the c() operation initializes a vector (it is considered by default a column vector)\n\niVec_example &lt;- c(1,0)\n\n\nBelow, we consider a two-state markov model. We build a 2 x 2 matrix of the transition probabilities:\n\ntProbs_example &lt;- matrix(c(0.7,0.3,\n                           0.1,0.9),\n                 nrow = 2, ncol = 2,\n                 byrow = T)\n\n\nNow, we want to calculate the proportion of individuals in the first time-cycle. The results will be saved in time1Prop\nNote: the number of columns in the matrix must match the number of rows in the vector.\n\ntime1Prop &lt;- tProbs_example %*% iVec_example\n\n\nTo get the proportion after the second-time we can multiply the first-time proportion that we just calculated by the transition probability matrix\n\ntime2Prop &lt;- tProbs_example %*% time1Prop\n\n\nWe can use the [i,j] operator to extract row i and column j of a matrix\n\ntProbs_example[1,] #extracts the first row\n\n[1] 0.7 0.3\n\ntProbs_example[,2] #extracts the second column\n\n[1] 0.3 0.9\n\ntProbs_example[1,2] #extracts first row and second column entry\n\n[1] 0.3\n\n\n\nWe can also use the -i operator to extract all except i\n\ntProbs_example[-1,]  #extracts all but the first row\n\n[1] 0.1 0.9\n\ntProbs_example[,-1]  #extracts all but the column\n\n[1] 0.3 0.9",
    "crumbs": [
      "Introduction",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Exercise 2.5</span>"
    ]
  },
  {
    "objectID": "Exercises/Ch2-Exercise-25.html#start-of-exercise-2.5",
    "href": "Exercises/Ch2-Exercise-25.html#start-of-exercise-2.5",
    "title": "\n1  Exercise 2.5\n",
    "section": "\n1.2 Start of Exercise 2.5",
    "text": "1.2 Start of Exercise 2.5\nFirst, we will calculate the monotherapy transition probabilities for the control based on the data provided in Table 2.5. These probabilities should match the transition probabilities provided in Table 2.2. part 1(a)\nWe need to calculate the following transition probabilities:\n\nTransition probability from A to A\nTransition probability from A to B\nTransition probability from A to C\nTransition probability from A to D\nTransition probability from B to B\nTransition probability from B to C\nTransition probability from B to D\nTransition probability from C to C\nTransition probability from C to D\n\n\n1.2.1 Part 1\nNow that we have calculated the transition probabilities, we will use these values to populate the transition probability matrix and initialize the parameters necessary for modelling.\nThe matrix will follow the structure below, as shown in table 2.6:\n\n#         To State\n#           A B C D\n# From    A\n# State   B\n#         C\n#         D\n\n\nAs you complete the matrix, remember, that it’s not possible to go backwards in this model, so any transition probability below the diagonal values will be 0.\n\ntProbs &lt;- matrix(\n  c(0.721453287, 0.201845444,0.066897347, 0.009803922,\n    0    , 0.581081081, 0.406995231, 0.011923688,\n    0    , 0    , 0.750142939, 0.249857061,\n    0    , 0    , 0    , 1\n  ),ncol = 4, nrow = 4, byrow = T\n)\n\nCheck. We will use rowSums to make sure we’ve entered our transition matrix correctly. All the rows should equal 1\n\nrowSums(tProbs) \n\n[1] 1 1 1 1\n\n\n\nNow, we will fill in other parameters that are provided in the exercise. After each parameter, we’ve used # and a description of what that parameter is so we can easily revisit our code at a future date.\n\n#costs\ndmca &lt;- 1701 #direct medical cost of A\ndmcb &lt;- 1774 #direct medical cost of B\ndmcc &lt;- 6948 #direct medical cost of C\nccca &lt;- 1055 #community care cost of A\ncccb &lt;- 1278 #community care cost of B\ncccc &lt;- 2059 #community care cost of C\ncAZT &lt;- 2278 #cost of Zidovudine\ncLam &lt;- 2086.5 #cost of Lamivudine \n\n#other parameters\nRR &lt;- 0.509 #relative risk of treatment\ncDR &lt;- 0.06 #annual discount rate cost (proportion)\noDR &lt;- 0 #annual discount rate benefits (proportion)\n\n\n1.2.2 Part 2\nNow, we will calculate the proportion of individuals in each state for years 1-20 (Monotherapy), their life-years, and associated costs.\nWe will input the initial vector for the state space, where each element refers to the initial proportion of individuals in state A-D respectively.\nWe assume all individuals start in State A. We are giving the vector the name iVec.\n\niVec &lt;-  c(1,0,0,0)\n\nWe are going to create a funcation called calculateYearlyProbs that we can use to calculate the proportion of people in each state at a given time point.\nThis function will return a t (years) x 4 (states) matrix where the rows represent the proportion in a given state at year t\n\ncalculateYearlyProbs &lt;- function(tProbs, t, iVec){\n  \n  #create empty matrix that we will fill in\n  \n  matReturn &lt;- matrix(nrow = t, ncol = 4)\n  \n  #initialize first vector of proportions\n  \n  #create column names\n  colnames(matReturn) &lt;- c(\"A\",\"B\",\"C\",\"D\")\n\n  #Loop through all time-points and multiply the vector by \n  for(i in 1:(t)){\n\n    matReturn[i,] &lt;-   iVec %*% tProbs\n    \n    #update ivec\n    iVec &lt;- iVec %*% tProbs\n    \n  }\n  return(matReturn)\n  \n}\n\nNow, we will call the function, by entering our transition probabilities matrix, the number of years we want to calculate, and our starting vector as arguments. We’ve called the results of our function yearlyProbs. It will return a matrix that is 20 rows (years) long and 4 states wide.\n\nyearlyProbs &lt;- calculateYearlyProbs(tProbs,20,iVec)\n\nCheck. Use rowSums to check that all rows sum to 1\n\nrowSums(yearlyProbs)\n\n [1] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n\n\nNow we will calculate the number of life years for each year. This is equal to the the proportion that is not in State D (death).\n\nlifeYears &lt;- rowSums(yearlyProbs[,-4])\n\n\n1.2.3 Part 3\nUsing the cost inputs from before, we will calculate the cost. Then, based on those costs, we will calculate the discounted cost using the discounted cost formula provided in the text.\nTo calculate the non-discounted costs, we will calculate a cost associated with each health state in our markov model, and then create a vector to hold the costs associated with each state.\n\ncostA &lt;- dmca+ccca+cAZT\ncostB &lt;- dmcb+cccb+cAZT\ncostC &lt;- dmcc+cccc+cAZT\n\ncostVector &lt;- c(costA,costB,costC)\n\nWe will use matrix multiplication to calculate the non-discounted cost. We will multiply yearlyProbs, the matrix holding the proportion in each health state by cycle (i.e. year), by our new costVector.\nRemember, we need to make sure the vector and the matrix have the same number of columns. So, we will use [-4] to remove the death state column from the matrix.\n\nnonDiscCost &lt;- yearlyProbs[,-4] %*% costVector\n\nOur non-discounted costs are saved in nonDiscCost. To get teh discounted cost, we will apply the discounting formula. We will create a discounting function that we can reuse in the future.\nSo we can apply this function to multiple values of t at once we will use R’s vectorization. All basic operations in R “-+^/*” support basic R vectorization.\nThis means we can use the discount formula for all values of t at once (t = 1,..,20). We can do this by using 1:t in place of “t” in the formula\n\ndiscountFormula &lt;- function(nonDiscount,discRate,t){\n  \n  return(nonDiscount/(1+discRate)^(1:t))\n  \n}\n\nWe can calculate the discounted costs by filling in the arguments for the newly created discount function. We need to specify: the non-discounted costs; the discount rate; and the number of years you are calculating for.\n\ndiscCost &lt;- discountFormula(nonDiscCost, discRate = cDR,20)\n\nWe will use the sum function to calculate the total costs and life years over the 20 years of the Markov model.\n\ntotalDiscCostMonoTherapy &lt;- sum(discCost)\ntotalLifeYearsMonoTherapy &lt;- sum(lifeYears)\n\n\n1.2.4 Part 4\nHaving completed the analysis for the monotherapy, we will repeat the same steps for the combination therapy, with a few changes. Use table 2.2 part 1(b) as a guide to calculate the combination transition matrix. Recall that the combination therapy is only used for the first two years of treatment.\nTo begin, lets create a function that converts the original transition matrix to the combination transition matrix by using the risk ratio provided\n\ncalculateProbCombination &lt;- function(tProbs,RR = 0.506){\n  \n  newMat &lt;- tProbs\n  \n  #change the upper diagonals and multiply by risk rate\n  newMat[upper.tri(newMat)] &lt;-   newMat[upper.tri(newMat)]*RR \n  \n  diag(newMat) &lt;- 0\n  \n  #change the diagonals to be 1- the rowsums\n  diag(newMat) &lt;- 1-rowSums(newMat)\n  \n  return(newMat)\n  \n}\n\nNow, we will use our function to calculate the transition probabilities for the combination therapy:\n\ntProbsComb &lt;- calculateProbCombination(tProbs,RR = RR)\n\nCheck. Just like before, we will use rowSums to check that all rows sum to 1\n\nrowSums(tProbsComb)\n\n[1] 1 1 1 1\n\n\nThen we will calculate the yearly proportions for the first two years using the function calculateYearlyProbs that we created above. The function arguments will include tProbsComb–the new proportions matrix for the combination therapy.\n\nprobsCombYearly1_2 &lt;- calculateYearlyProbs(tProbsComb,t = 2,iVec = iVec)\n\nNow we will calculate the yearly proportions for years 3-20. We will use the transition probabilities for monotherapy for these calculations, reflecting that the combination therapy is only used in years 1 and 2. We will then combined the two calculations to get the values for years 1-20, and check that each row sums to 1.\n\nprobsCombYearly3_20 &lt;- calculateYearlyProbs(tProbs,t = 18,iVec =probsCombYearly1_2[2,])\n\n#combine them\nprobsCombYearly &lt;- rbind(probsCombYearly1_2,probsCombYearly3_20)\n\n#check\nrowSums(probsCombYearly) # all sum to 1\n\n [1] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n\n\nUsing the same approach as for the monotherapy, we will calculate the life years and the costs, being careful to apply the correct costs to the correct proportions.\n\n#calculate the life-years\nlifeYearsComb &lt;- rowSums(probsCombYearly[,-4])\n\n#calculate the costs\ncostAComb &lt;- costA+cLam\ncostBComb &lt;- costB+cLam\ncostCComb &lt;- costC+cLam\n#combine the costs into a vector\ncostVectorComb &lt;- c(costAComb,costBComb,costCComb)\n\n#use matrix multiplication\ncostCombNonDisc1_2 &lt;-   round(probsCombYearly[1:2,-4],6) %*% costVectorComb\ncostCombNonDisc3_20 &lt;- round(probsCombYearly[3:20,-4],6) %*% costVector\n\nWe will use rbind to combine the non-discounted costs and then use the discount function to calculate the discounted costs. With the costs and life years calculated for each year, we will use sum to calculate the total costs and life years associated with the combination therapy.\n\n#use rbind to combine the non-discounted cost\ncostCombNonDisc &lt;- rbind(costCombNonDisc1_2,costCombNonDisc3_20)\n\n#calculate the discounted rate\ncostCombDisc &lt;- discountFormula(costCombNonDisc, discRate = cDR,20)\n\n#calculate the total costs and life years for the combination therapy\ntotalLifeYearsComb &lt;- sum(lifeYearsComb)\ntotalDiscCostComb &lt;- sum(costCombDisc)\n\n\n1.2.5 Part 5\nLastly, compare the total life years and costs between the monotherapy and combination therapy to calculate the ICER\n\n#combination over monotherapy\nlifeYearsGained &lt;- totalLifeYearsComb - totalLifeYearsMonoTherapy\nincreasedCost &lt;- totalDiscCostComb - totalDiscCostMonoTherapy\n\n#calculate ICER\nICER &lt;- increasedCost/lifeYearsGained\n\nICER \n\n[1] 6275.964",
    "crumbs": [
      "Introduction",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Exercise 2.5</span>"
    ]
  }
]